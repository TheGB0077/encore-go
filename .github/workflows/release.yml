name: Release

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Go version to build ("1.21")'
        required: true
      prerelease:
        description: "Is this a pre-release?"
        required: false
        default: "false"

permissions:
  contents: write

jobs:
  build:
    strategy:
      matrix:
        include:
          - builder: macos-latest
            goos: darwin
            goarch: arm64
          - builder: macos-latest
            goos: darwin
            goarch: amd64
          - builder: ubuntu-22.04
            goos: linux
            goarch: amd64
          - builder: ubuntu-22.04
            goos: linux
            goarch: arm64
          - builder: windows-latest
            goos: windows
            goarch: amd64

    runs-on: ${{ matrix.builder }}
    outputs:
      built_version: ${{ steps.encore_go_version.outputs.version }}
    steps:
      - name: Check out repo
        uses: actions/checkout@v5
        with:
          fetch-depth: 0 # We need the full history for the Go submodule
          submodules: "recursive" # Checkout the Go submodule
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Go
        uses: actions/setup-go@v6
        with:
          go-version: "1.24"
          cache: true

      - name: "Create patched runtime"
        run: bash ./apply_patch.bash "${{ github.event.inputs.version }}"

      - name: Build
        run: go run . -dst=dist -goos=${{ matrix.goos }} -goarch=${{ matrix.goarch }}
        env:
          GO111MODULE: "on"

      # This step gets the exact version of Go we're releasing (including minor), so if we give the input as `1.17` this might return `encore-go1.17.5`.
      - name: "Read the version of Go we built"
        id: encore_go_version
        run: echo "version=$(go run . --read-built-version)" >> $GITHUB_OUTPUT

      - name: "Tar artifacts"
        shell: bash
        env:
          VERSION: ${{ steps.encore_go_version.outputs.version }}
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}
        run: tar -czvf "${VERSION}-${GOOS}_${GOARCH}.tar.gz" -C "dist/${GOOS}_${GOARCH}" .

      - name: "Upload build artifact"
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.encore_go_version.outputs.version }}-${{ matrix.goos }}_${{ matrix.goarch }}
          path: ${{ steps.encore_go_version.outputs.version }}-${{ matrix.goos }}_${{ matrix.goarch }}.tar.gz
  release:
    runs-on: ubuntu-22.04
    needs: build
    steps:
      - name: "Download artifacts from build steps"
        uses: actions/download-artifact@v5

      - name: "Convert windows artifact to zip"
        run: |
          cd ${{needs.build.outputs.built_version}}-windows_amd64
          tar -xzf ${{needs.build.outputs.built_version}}-windows_amd64.tar.gz
          zip -r ${{needs.build.outputs.built_version}}-windows_amd64.zip encore-go

      - name: "Move, rename and create checksums for the artifacts"
        run: |
          mkdir output
          mv ${{needs.build.outputs.built_version}}-linux_amd64/${{needs.build.outputs.built_version}}-linux_amd64.tar.gz output/linux_x86-64.tar.gz
          mv ${{needs.build.outputs.built_version}}-linux_arm64/${{needs.build.outputs.built_version}}-linux_arm64.tar.gz output/linux_arm64.tar.gz
          mv ${{needs.build.outputs.built_version}}-darwin_amd64/${{needs.build.outputs.built_version}}-darwin_amd64.tar.gz output/macos_x86-64.tar.gz
          mv ${{needs.build.outputs.built_version}}-darwin_arm64/${{needs.build.outputs.built_version}}-darwin_arm64.tar.gz output/macos_arm64.tar.gz
          mv ${{needs.build.outputs.built_version}}-windows_amd64/${{needs.build.outputs.built_version}}-windows_amd64.tar.gz output/windows_x86-64.tar.gz
          mv ${{needs.build.outputs.built_version}}-windows_amd64/${{needs.build.outputs.built_version}}-windows_amd64.zip output/windows_x86-64.zip
          cd output
          sha256sum * > checksums.txt
          ls -R .
          mv * ../
          cd ..
          cat checksums.txt

      - name: "Publish release"
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ needs.build.outputs.built_version }}
          name: ${{ needs.build.outputs.built_version }}
          body: |
            This release is the compiled version of ${{ needs.build.outputs.built_version }}
          draft: false
          prerelease: ${{ github.event.inputs.prerelease }}
          files: |
            linux_x86-64.tar.gz
            linux_arm64.tar.gz
            windows_x86-64.tar.gz
            windows_x86-64.zip
            macos_arm64.tar.gz
            macos_x86-64.tar.gz
            checksums.txt
